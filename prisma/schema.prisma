// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ClickLog {
  id String @id @default(cuid()) @map("_id")

  shortKey  String
  ipAddress String
  userAgent String?
  shortUrl  ShortUrl @relation(fields: [shortKey], references: [shortKey], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model ShortUrl {
  id String @id @default(cuid()) @map("_id")

  shortKey    String @unique
  originalUrl String
  clicks      Int    @default(0)

  clickLogs ClickLog[]

  guestId String?
  userId  String? // null = guest
  user    User?   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  expiresAt DateTime?
}

model User {
  id String @id @default(cuid()) @map("_id")

  name         String
  picture      String?
  email        String  @unique
  password     String?
  provider     String? // e.g., 'google', 'credentials'
  subscription Boolean @default(false)

  shortUrls ShortUrl[]
  token     Token[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Token {
  id String @id @default(cuid()) @map("_id")

  token     String   @unique
  type      String // 'auth' | 'reset' | etc.
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime

  createdAt DateTime @default(now())
}
